#!/usr/bin/env python

from optparse import OptionParser
from os import path
import cPickle as pickle
import re
import sys
import urllib
import xml.etree.cElementTree as etree



# --- Data ---


_refgram = {'A': [(14, 6)],
            'BAI': [(9, 6)],
            'BAhE': [(19, 11)],
            'BE': [(5, 7)],
            'BEI': [(5, 7)],
            'BEhO': [(5, 7)],
            'BIhE': [(18, 5)],
            'BIhI': [(14, 16)],
            'BO': [(5, 3), (15, 6), (18, 17)],
            'BOI': [(18, 6)],
            'BU': [(17, 4)],
            'BY': [(17, 2)],
            'CAI': [(13, 4)],
            'CAhA': [(10, 19)],
            'CEI': [(7, 5)],
            'CEhE': [(14, 11), (16, 7)],
            'CO': [(5, 8)],
            'COI': [(6, 11), (13, 14)],
            'CU': [(9, 2)],
            'CUhE': [(10, 24)],
            'DAhO': [(7, 13)],
            'DOI': [(13, 14)],
            'DOhU': [(13, 14)],
            'FA': [(9, 3)],
            'FAhA': [(10, 2)],
            'FAhO': [(19, 15)],
            'FEhE': [(10, 11)],
            'FEhU': [(9, 5)],
            'FIhO': [(9, 5)],
            'FOI': [(17, 6)],
            'FUhA': [(18, 16)],
            'FUhE': [(19, 8)],
            'FUhO': [(19, 8)],
            'GA': [(14, 5)],
            'GAhO': [(14, 16)],
            'GEhU': [(8, 3)],
            'GI': [(14, 5)],
            'GIhA': [(14, 3)],
            'GOI': [(8, 3)],
            'GOhA': [(7, 6)],
            'GUhA': [(14, 3)],
            'I': [(19, 2)],
            'JA': [(14, 3)],
            'JAI': [(9, 12)],
            'JOI': [(14, 14)],
            'JOhI': [(18, 15)],
            'KE': [(5, 5)],
            'KEI': [(11, 1)],
            'KEhE': [(5, 5)],
            'KI': [(10, 13)],
            'KOhA': [(7, 1)],
            'KU': [(6, 2), (10, 1)],
            'KUhE': [(18, 6)],
            'KUhO': [(8, 1)],
            'LA': [(6, 2)],
            'LAU': [(17, 14)],
            'LAhE': [(6, 10)],
            'LE': [(6, 2)],
            'LEhU': [(19, 9)],
            'LI': [(18, 5)],
            'LIhU': [(19, 9)],
            'LOhO': [(18, 17)],
            'LOhU': [(19, 9)],
            'LU': [(19, 9)],
            'LUhU': [(6, 10)],
            'MAI': [(18, 19), (19, 1)],
            'MAhO': [(18, 6)],
            'ME': [(5, 10), (18, 1)],
            'MEhU': [(5, 11)],
            'MOI': [(5, 11)],
            'MOhE': [(18, 18)],
            'MOhI': [(10, 8)],
            'NA': [(14, 3), (15, 7)],
            'NAI': [(14, 3), (15, 7)],
            'NAhE': [(15, 4)],
            'NAhU': [(18, 18)],
            'NIhE': [(18, 18)],
            'NIhO': [(19, 3)],
            'NOI': [(8, 1)],
            'NU': [(11, 1)],
            'NUhA': [(18, 19)],
            'NUhI': [(14, 11), (16, 7)],
            'NUhU': [(14, 11)],
            'PA': [(18, 2)],
            'PEhE': [(14, 11)],
            'PEhO': [(18, 6)],
            'PU': [(10, 4)],
            'RAhO': [(7, 6)],
            'ROI': [(10, 9)],
            'SA': [(19, 13)],
            'SE': [(5, 1), (9, 4)],
            'SEI': [(19, 12)],
            'SEhU': [(19, 12)],
            'SI': [(19, 13)],
            'SOI': [(7, 8)],
            'SU': [(19, 13)],
            'TAhE': [(10, 9)],
            'TEI': [(17, 6)],
            'TEhU': [(18, 15)],
            'TO': [(19, 12)],
            'TOI': [(19, 12)],
            'TUhE': [(19, 2)],
            'TUhU': [(19, 2)],
            'UI': [(13, 1)],
            'VA': [(10, 2)],
            'VAU': [(14, 9)],
            'VEI': [(18, 5)],
            'VEhA': [(10, 5)],
            'VEhO': [(19, 5)],
            'VIhA': [(10, 7)],
            'VUhO': [(8, 8)],
            'VUhU': [(18, 5)],
            'XI': [(18, 13)],
            'Y': [(19, 14)],
            'ZAhO': [(10, 10)],
            'ZEI': [(4, 6)],
            'ZEhA': [(10, 5)],
            'ZI': [(10, 4)],
            'ZIhE': [(8, 4)],
            'ZO': [(19, 10)],
            'ZOI': [(19, 10)],
            'ZOhU': [(16, 2), (19, 4)]}



# --- CLI helpers ---


class Formatter():

    def __init__(self, db):
        self._db = db
        self._last = None
        self._multi = False

    def write(self, entry, data=''):
        if not entry == self._last:
            if self._multi and self._last:
                self._multi = False
                print
            print ' %s%s : %s' % (' ' * (self._db._longest-len(entry)),
                                  entry, data)
        else:
            self._multi = True
            print ' %s : %s' % (' ' * self._db._longest, data)
        self._last = entry

    def glosses(self, entry, place=1):
        if place in self._db.glosses(entry):
            keywords = [('"%s" in the sense of "%s"' % i if i[1] else
                         '"%s"' % i[0])
                        for i in self._db.glosses(entry)[place]]
            return '(x%d) %s' % (place, ', '.join(keywords).encode('utf-8'))
        return ''

    def refgrams(self, entry):
        selmaho = self._db.selmaho(entry)
        if selmaho:
            pure = re.search(r'^([a-zA-Z]+)', selmaho).group(1)
            if pure in _refgram:
                urls = ['<http://dag.github.com/cll/%s/%s/>' % i
                        for i in _refgram[pure]]
                return ', '.join(urls)
        return ''

    def rafsi(self, entry):
        return ', '.join(['-%s-' % r for r in self._db.rafsi(entry)])


class Command():

    def __init__(self):
        self.name = self.__class__.__name__.lower()
        self.parser = OptionParser(usage='makfa %s [entries]' % self.name,
                                   description=self.__class__.__doc__)
        self.parser.add_option('-q', '--quiet', action='store_true',
                               dest='quiet', help='Pipe friendly output')

    def parse(self, argv, db):
        self.formatter = Formatter(db)
        (options, args) = self.parser.parse_args(argv)
        if args:
            for entry in args:
                entry = entry.replace('h', "'")
                if entry in db:
                    self.output(entry, db, options)
        else:
            while True:
                entry = raw_input().replace('h', "'")
                if entry in db:
                    self.output(entry, db, options)

    def output(self, entry, db, options):
        if options.quiet:
            if db[entry][self.name]:
                print db[entry][self.name].encode('utf-8')
        else:
            data = (db[entry][self.name] or '').encode('utf-8')
            self.formatter.write(entry, data)



# --- Commands ---


class Find():
    """Search for entries."""

    def __init__(self):
        parser = OptionParser(usage='makfa find [options] [query]',
                              description=self.__class__.__doc__)
        parser.add_option('-t', '--type', dest='type', help='Type of word')
        parser.add_option('-v', '--valsi', dest='valsi',
                          help='Match entry name')
        parser.add_option('-g', '--gloss', dest='gloss',
                          help='Match against gloss words')
        parser.add_option('-r', '--rafsi', dest='rafsi',
                          help='Match against rafsi affixes')
        parser.add_option('-s', '--selmaho', dest='selmaho',
                          help='Match against selmaho grammatical class')
        parser.add_option('-d', '--definition', dest='definition',
                          help='Match against definitions by regexp')
        parser.add_option('-n', '--notes', dest='notes',
                          help='Match against notes by regexp')
        parser.add_option('-R', '--regexp', action='store_true', dest='regexp',
                          help='Match more fields by regexp')
        parser.add_option('-D', '--show-definition', action='store_true',
                          dest='show_definition',
                          help='Show definition of matching entries')
        parser.add_option('-S', '--show', action='store_true', dest='show',
                          help='Show all data of matching entries')
        self.parser = parser

    def results(self, argv, db):
        (options, args) = self.parser.parse_args(argv)
        self.options = options
        filter = Filter(db)
        if args:
            filter.results = []
            query, regexp = ' '.join(args), options.regexp
            filter.results.extend(Filter(db).gloss(query, regexp).results)
            filter.results.extend(Filter(db).valsi(query, regexp).results)
            filter.results.extend(Filter(db).rafsi(query, regexp).results)
            filter.results.extend(Filter(db).selmaho(query, regexp).results)
            filter.results.extend(Filter(db).definition(query, True).results)
            filter.results.extend(Filter(db).notes(query, True).results)
            uniq = []
            [uniq.append(i) for i in filter.results if i not in uniq]
            filter.results = uniq
        filter.definition(options.definition, True)
        filter.gloss(options.gloss, options.regexp)
        filter.notes(options.notes, True)
        filter.rafsi(options.rafsi, options.regexp)
        filter.selmaho(options.selmaho, options.regexp)
        filter.type(options.type, options.regexp)
        filter.valsi(options.valsi, options.regexp)
        return filter.results

    def parse(self, argv, db):
        results = self.results(argv, db)
        if results:
            if self.options.show:
                Show().parse(results, db)
            elif self.options.show_definition:
                Definition().parse(results, db)
            else:
                for entry in results:
                    print entry


class Show(Command):
    """Show all information for entries."""

    def __init__(self):
        self.parser = OptionParser(usage='makfa show [entries]',
                                   description=self.__class__.__doc__)

    def output(self, entry, db, options):
        meta = [db.type(entry), db.selmaho(entry), self.formatter.rafsi(entry)]
        self.formatter.write(entry, ' '.join([i for i in meta if i]))
        self.formatter.write(entry, db.definition(entry))
        for place in db.glosses(entry):
            self.formatter.write(entry, self.formatter.glosses(entry, place))
        if self.formatter.refgrams(entry):
            self.formatter.write(entry, self.formatter.refgrams(entry))
        if db.notes(entry):
            self.formatter.write(entry, db.notes(entry))


class Console():
    """Prompt for search queries and show full results."""

    def __init__(self):
        self.parser = OptionParser(usage='makfa console',
                                   description=self.__class__.__doc__)

    def parse(self, argv, db):
        self.parser.parse_args(argv)
        import readline
        finder = Find()
        shower = Show()
        try:
            while True:
                input = raw_input('?- ').split()
                results = finder.results(input, db)
                results.reverse()
                if results:
                    shower.parse(results, db)
        except (KeyboardInterrupt, EOFError):
            print
            print '% halt'


class Definition(Command):
    """Show entry definitions."""


class Gloss(Command):
    """Show glosses and place keywords for entries."""

    def __init__(self):
        Command.__init__(self)
        self.parser.add_option('-p', '--place', type='int', default=1,
                               dest='place', help='Gloss word place')

    def output(self, entry, db, options):
        if options.quiet:
            if options.place in db.glosses(entry):
                print db.glosses(entry)[options.place][0][0]
            else:
                print
        else:
            data = self.formatter.glosses(entry, options.place)
            self.formatter.write(entry, data)


class Notes(Command):
    """Show notes of entries."""


class Rafsi(Command):
    """Show affix forms of entries."""

    def output(self, entry, db, options):
        if options.quiet:
            print ' '.join(db.rafsi(entry))
        else:
            self.formatter.write(entry, self.formatter.rafsi(entry))


class References(Command):
    """List entries referenced in entries."""

    def output(self, entry, db, options):
        refs = re.findall(r'\{(.+?)\}', db.notes(entry))
        if options.quiet:
            for cf in refs:
                print cf
        else:
            self.formatter.write(entry, ' '.join(refs))


class Selmaho(Command):
    """Show grammatical classes of entries."""

    def output(self, entry, db, options):
        if options.quiet:
            print db.selmaho(entry)
        else:
            data = [db.selmaho(entry), self.formatter.refgrams(entry)]
            self.formatter.write(entry, ' '.join(data))


class Type(Command):
    """Show what type entries are."""



# --- Dictionary API ---


class Filter():

    def __init__(self, db):
        self._db = db
        self.results = list(db)

    def pattern(method):
        def f(self, pattern=None, regexp=False):
            if pattern:
                if regexp:
                    pattern = re.compile(pattern, re.IGNORECASE)
                self.results = [i for i in self.results
                                  if method(self, i, pattern)]
            return self
        return f

    @pattern
    def definition(self, entry, pattern):
        return pattern.search(self._db.definition(entry))

    @pattern
    def gloss(self, entry, pattern):
        for place in self._db.glosses(entry).values():
            for keyword in place:
                if isinstance(pattern, basestring):
                    if pattern == keyword[0]:
                        return True
                elif pattern.search(keyword[0]):
                    return True

    @pattern
    def notes(self, entry, pattern):
        return pattern.search(self._db.notes(entry))

    @pattern
    def rafsi(self, entry, pattern):
        if isinstance(pattern, basestring):
            return pattern.replace('h', "'") in self._db.rafsi(entry)
        else:
            return any([pattern.search(i) for i in self._db.rafsi(entry)])

    @pattern
    def selmaho(self, entry, pattern):
        if isinstance(pattern, basestring):
            return pattern.upper() == self._db.selmaho(entry).upper()
        else:
            return pattern.search(self._db.selmaho(entry) or '')

    @pattern
    def type(self, entry, pattern):
        if isinstance(pattern, basestring):
            return pattern == self._db.type(entry)
        else:
            return pattern.search(self._db.type(entry))

    @pattern
    def valsi(self, entry, pattern):
        if isinstance(pattern, basestring):
            return pattern.replace('h', "'") == entry
        else:
            return pattern.search(entry)


class Dictionary():

    def __init__(self):
        try:
            self._db = pickle.load(open(path.expanduser('~/.makfa.dump')))
        except:
            sys.stderr.write('(Fetching dictionary, this may take a minute.)\n')
            db = {'order': [], 'entries': {}}
            url = 'http://jbovlaste.lojban.org/export/xml-export.html?lang=en'
            tree = etree.parse(urllib.urlopen(url))
            types = ['gismu', 'cmavo', 'cmavo cluster', 'lujvo', "fu'ivla",
                     'experimental gismu', 'experimental cmavo', 'cmene']
            for type in types:
                for valsi in tree.findall('//valsi'):
                    if valsi.get('type') == type:
                        word = valsi.get('word')
                        db['order'].append(word)
                        db['entries'][word] = {'type': type, 'rafsi': [],
                                               'selmaho': None,
                                               'definition': None,
                                               'notes': None, 'places': {}}
                        for child in valsi.getchildren():
                            if child.tag == 'rafsi':
                                db['entries'][word]['rafsi'].append(child.text)
                            elif child.tag == 'selmaho':
                                db['entries'][word]['selmaho'] = child.text
                            elif child.tag == 'definition':
                                db['entries'][word]['definition'] = \
                                    self._prettyplace(child.text)
                            elif child.tag == 'notes':
                                db['entries'][word]['notes'] = \
                                    self._prettyplace(child.text)
            for valsi in tree.findall('//nlword'):
                word = valsi.get('valsi')
                place = int(valsi.get('place') or '1')
                sense = valsi.get('sense')
                if place not in db['entries'][word]['places']:
                    db['entries'][word]['places'][place] = []
                db['entries'][word]['places'][place]. \
                    append((valsi.get('word'), sense))
            pickle.dump(db, open(path.expanduser('~/.makfa.dump'), 'w'), -1)
            self._db = db
        self._longest = sorted([len(i) for i in self._db['order']])[-1]

    def definition(self, entry):
        return self[entry]['definition'].encode('utf-8')

    def glosses(self, entry):
        return self[entry]['places']

    def notes(self, entry):
        return (self[entry]['notes'] or '').encode('utf-8')

    def rafsi(self, entry):
        return self[entry]['rafsi']

    def selmaho(self, entry):
        return self[entry]['selmaho'] or ''

    def type(self, entry):
        return self[entry]['type']

    def _prettyplace(self, defn):
        def f(m):
            res = m.group(1).replace('_', '')
            return res.replace('{', '').replace('}', '')
        return re.sub(r'\$(.+?)\$', f, defn.replace('\n', ' '))

    def __getitem__(self, key):
        return self._db['entries'][key]

    def __iter__(self):
        return iter(self._db['order'])



# --- Execution ---


def main(command, args):
    try:
        command.parse(args, Dictionary())
    except (KeyboardInterrupt, EOFError):
        pass


if __name__ == '__main__':
    commands = {'find': Find,
                'show': Show,
                'console': Console,
                'definition': Definition,
                'gloss': Gloss,
                'notes': Notes,
                'rafsi': Rafsi,
                'references': References,
                'selmaho': Selmaho,
                'type': Type}

    helps = ['help', 'commands', '-h', '--help']
    if len(sys.argv) == 1 or any([sys.argv[1] == h for h in helps]):
        print 'Usage: makfa <command> [options]'
        print
        print 'Lojban dictionary.'
        print
        print 'Commands:'
        print
        for command in sorted(commands.keys()):
            print '  %s%s  %s' % (' ' * (10-len(command)), command,
                                commands[command].__doc__ or '')
        print

    elif sys.argv[1] not in commands:
        similar = [i for i in commands if i.startswith(sys.argv[1])]
        if not similar:
            print 'Unknown command.'
        elif len(similar) > 1:
            print 'Ambiguous command resolution: %s' % ', '.join(similar)
        else:
            main(commands[similar[0]](), sys.argv[2:])

    else:
        main(commands[sys.argv[1]](), sys.argv[2:])
